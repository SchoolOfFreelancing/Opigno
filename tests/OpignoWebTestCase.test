<?php

/**
 * @file
 * Defines the base class for Opigno unit testing.
 * This base class contains re-usable logic that will make it easier and faster to
 * write Opigno-specific unit tests.
 */
class OpignoWebTestCase extends DrupalWebTestCase {
  
  /**
   * @return array The tests information
   */
  public static function getInfo() {
    return array(
      'name' => 'Opigno web tests',
      'description' => 'Test the module Opigno',
      'group' => 'Opigno'
    );
  }
  
  public function setUp() {
    ini_set('max_execution_time', 3000);
    
    $this->profile = 'opigno_lms';
    parent::setUp();

//    $this->originalPrefix = $GLOBALS['drupal_travis_db'];
  }
  
  /**
   * Running tests
   */
  public function testDrupal() {
    $this->createCourse();
    $this->createLesson();
  }
  
  /**
   * Creation of a public course.
   */
  protected function createCourse() {

//    $perms = user_role_permissions(array(array_search('authenticated_user', user_roles()) => 'authenticated_user'));
//    $perms = array_keys($perms[array_search('authenticated_user', user_roles())]);
//    $authenticated_user = $this->drupalCreateUser($perms);
//
//    $this->drupalLogin($authenticated_user);
//    $this->drupalGet('node/course/add');
//    $this->assertText('You are not authorized to access this page.');
//    $this->drupalLogout();
    
    $perms = user_role_permissions(array(array_search('administrator', user_roles()) => 'administrator'));
    $perms = array_keys($perms[array_search('administrator', user_roles())]);
    $admin = $this->drupalCreateUser($perms);
    
    $this->drupalLogin($admin);
    $this->drupalGet('node/add/course');
    
    $course_content = array();
    $course_content['title'] = $this->randomName(7);
    $course_content['body[und][0][value]'] = $this->randomString(50);
    $course_content['group_access[und]'] = '0';
    
    // The option for adding a file to the course
//    $course_content['opigno_course_tools[und][tft]'] = '1';
    
    $this->drupalPost('node/add/course', $course_content, t('Save'));
    
    // For adding a file in the course
//    $this->drupalGet('my-courses');
//    $label = $course_content['title'];
//    $this->clickLink($label, $index = 0);
    
  }
  
  /**
   * Attending a course for a student (authenticated user).
   */
  protected function attendingCourse() {
    $this->drupalLogout();
    
    $perms = user_role_permissions(array(array_search('authenticated user', user_roles()) => 'authenticated user'));
    $perms = array_keys($perms[array_search('authenticated user', user_roles())]);
    $authenticated_user = $this->drupalCreateUser($perms);
    
    $this->drupalLogin($authenticated_user);
    $this->drupalGet('course-catalogue');
    $this->clickLink('Subscribe to group', $index = 0);
    
    $edit = array();
    
    $this->drupalPost('', $edit, t('Join'));
  }
  
  /**
   * Attending a private course
   */
  protected function createPrivateCourse() {
    $perms = user_role_permissions(array(array_search('administrator', user_roles()) => 'administrator'));
    $perms = array_keys($perms[array_search('administrator', user_roles())]);
    $admin = $this->drupalCreateUser($perms);
    
    $this->drupalLogin($admin);
    $this->drupalGet('node/add/course');
    
    $course_content = array();
    $course_content['title'] = $this->randomName(7);
    $course_content['body[und][0][value]'] = $this->randomString(50);
    $course_content['group_access[und]'] = '2';
    
    $this->drupalPost('node/add/course', $course_content, t('Save'));
    
    $this->drupalLogout();
    
    // Connection and inscription to the course as a student manager
    $perms = user_role_permissions(array(array_search('student manager', user_roles()) => 'student manager'));
    $perms = array_keys($perms[array_search('student manager', user_roles())]);
    $student_manager = $this->drupalCreateUser($perms);
    $this->drupalLogin($student_manager);
    $this->drupalGet('course-catalogue');
    $this->clickLink('Subscribe to group', $index = 0);
    
    $this->drupalLogout();
    
    // Connection and inscription to the course as an authenticated user
    $perms = user_role_permissions(array(array_search('authenticated user', user_roles()) => 'authenticated user'));
    $perms = array_keys($perms[array_search('authenticated user', user_roles())]);
    $authenticated_user = $this->drupalCreateUser($perms);
    $this->drupalLogin($authenticated_user);
    $this->drupalGet('course-catalogue');
    $this->clickLink('Subscribe to group', $index = 0);
  
    $this->drupalLogout();
    
    // Connection and inscription to the course as an administrator
    $perms = user_role_permissions(array(array_search('administrator', user_roles()) => 'administrator'));
    $perms = array_keys($perms[array_search('administrator', user_roles())]);
    $administrator = $this->drupalCreateUser($perms);
    $this->drupalLogin($administrator);
    $this->drupalGet('course-catalogue');
    $this->clickLink('Subscribe to group', $index = 0);
    $this->drupalGet('my-courses');
  
    $this->drupalLogout();
  }
  
  /**
   * Create a course for live lesson and create the live lesson by a teacher
   */
  protected function createLiveCourse() {
    $perms = user_role_permissions(array(array_search('administrator', user_roles()) => 'administrator'));
    $perms = array_keys($perms[array_search('administrator', user_roles())]);
    $admin = $this->drupalCreateUser($perms);
  
    $this->drupalLogin($admin);
  
    // Enabled the module
    $this->drupalGet('admin/modules');
    $module_enabled = array();
    $module_enabled['modules[Opigno Apps][opigno_live_meetings][enable]'] = '1';
    $this->drupalPost(NULL, $module_enabled, t('Save configuration'));
    $edit_continue = array();
    $this->drupalPost(NULL, $edit_continue, t('Continue'));
  
    $this->drupalGet('node/add/course');
  
    $course_content = array();
    $course_content['title'] = $this->randomName(7);
    $course_content['body[und][0][value]'] = $this->randomString(50);
    $course_content['group_access[und]'] = '1';
    $course_content['opigno_course_tools[und][live_meetings]'] = '1';
  
    $this->drupalPost('node/add/course', $course_content, t('Save'));
  
    

    // Subscribe to the course as a student
    $this->drupalLogout();

    $perms = user_role_permissions(array(array_search('authenticated user', user_roles()) => 'authenticated user'));
    $perms = array_keys($perms[array_search('authenticated user', user_roles())]);
    $authenticated_user = $this->drupalCreateUser($perms);

    $this->drupalLogin($authenticated_user);
    $this->drupalGet('course-catalogue');
    $this->clickLink('Subscribe to group', $index = 0);

    $edit = array();

    $this->drupalPost('', $edit, t('Join'));

    // Change the role of the student for this course
    $this->drupalLogin($admin);
    $this->drupalGet('node/3/group');
    $this->clickLink('edit', $index = 1);

    $role_course = array();
    $role_course['roles[65]'] = '65';
    $this->drupalPost(NULL, $role_course, t('Update membership'));

    // Create a live lesson
    $this->drupalLogout();
    $this->drupalLogin($authenticated_user);
    $this->drupalGet('node/3/live-meetings');
    $this->clickLink('Create meeting', $index = 0);

    $edit = array();
    $this->drupalPost(NULL, $edit, t('Save'));
    
  }
  
  /**
   * Adding a file to a course
   */
  protected function addingFile() {
    $this->drupalGet('node/3/tft');
    $this->clickLink('Add a file', $index = 0);
    
    $path = './sites/default/files/test.txt';
    $filetitle = 'test';
    $filename = 'test.txt';
    
    $file_temp = file_get_contents($path);
    $file_temp = file_save_data($file_temp, 'c://' . $filename, FILE_EXISTS_RENAME);
    
    $file_content = array();
    $file_content['title'] = $filetitle;
    $file_content['files[tft_file_und_0]'] = $file_temp;
    
    $this->drupalPost(NULL, $file_content, t('Save'));
    
    $this->drupalGet('node/3/tft');
    
  }
  
  /*
   * Access to a file document only if we join it
   */
  protected function accessFile() {
    $this->drupalLogout();
    
    $perms = user_role_permissions(array(array_search('administrator', user_roles()) => 'administrator'));
    $perms = array_keys($perms[array_search('administrator', user_roles())]);
    $admin = $this->drupalCreateUser($perms);
    
    $this->drupalLogin($admin);
    $this->drupalGet('node/3/group');
  }
  
  /**
   * Create a lesson in a course
   */
  protected function createLesson() {
    $this->drupalGet('node/3/quizzes');
    $this->clickLink('Add new lesson', $index = 0);
    
    $lesson_content = array();
    $lesson_content['title'] = $this->randomName(4);
    $this->drupalPost(NULL, $lesson_content, t('Save'));
    
    $this->drupalGet('node/add/truefalse', array(
      'query' => array(
        'quiz_nid' => 3,
        'quiz_vid' => 3,
      )
    ));
    
    $edit = array();
    $this->drupalPost(NULL, $edit, t('Save'));
//    $this->drupalPost(NULL, $edit, t('Submit'));
  }
  
  /**
   * Teacher verified results on a lesson.
   */
  protected function teacherVerifiedResult() {
    $this->drupalLogout();
  
    $perms = user_role_permissions(array(array_search('authenticated user', user_roles()) => 'authenticated user'));
    $perms = array_keys($perms[array_search('authenticated user', user_roles())]);
    $authenticated_user = $this->drupalCreateUser($perms);
  
    $this->drupalLogin($authenticated_user);
    $this->drupalGet('course-catalogue');
    $this->clickLink('Subscribe to group', $index = 0);
    $edit = array();
    $this->drupalPost('', $edit, t('Join'));
    
  
    $this->drupalLogout();
  
    $perms = user_role_permissions(array(array_search('administrator', user_roles()) => 'administrator'));
    $perms = array_keys($perms[array_search('administrator', user_roles())]);
    $administrator = $this->drupalCreateUser($perms);
    
    $this->drupalLogin($administrator);
    
    $this->drupalGet('course-catalogue');
    $this->clickLink('Subscribe to group', $index = 0);
    $edit = array();
    $this->drupalPost('', $edit, t('Join'));
  }
}
