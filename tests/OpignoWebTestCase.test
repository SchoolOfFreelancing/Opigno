<?php

/**
 * @file
 * Defines the base class for Opigno unit testing.
 * This base class contains re-usable logic that will make it easier and faster to
 * write Opigno-specific unit tests.
 */
class OpignoWebTestCase extends DrupalWebTestCase {
  protected $course_content;
  protected $lesson_content;
  
  /**
   * @return array The tests information.
   */
  public static function getInfo() {
    return array(
      'name' => 'Opigno web tests',
      'description' => 'Test the module Opigno',
      'group' => 'Opigno'
    );
  }
  
  public function setUp() {
    ini_set('max_execution_time', 3000);
    
    $this->profile = 'opigno_lms';
    parent::setUp();

//    $this->originalPrefix = $GLOBALS['drupal_travis_db'];
  }
  
  /**
   * Running tests.
   */
  public function testDrupal() {
    $this->createCourse();
    $this->createObligatoryLesson();
  }
  
  /**
   * Creation of a public course.
   */
  protected function createCourse() {

//    $perms = user_role_permissions(array(array_search('authenticated_user', user_roles()) => 'authenticated_user'));
//    $perms = array_keys($perms[array_search('authenticated_user', user_roles())]);
//    $authenticated_user = $this->drupalCreateUser($perms);
//
//    $this->drupalLogin($authenticated_user);
//    $this->drupalGet('node/course/add');
//    $this->assertText('You are not authorized to access this page.');
//    $this->drupalLogout();
    
    $perms = user_role_permissions(array(array_search('administrator', user_roles()) => 'administrator'));
    $perms = array_keys($perms[array_search('administrator', user_roles())]);
    $admin = $this->drupalCreateUser($perms);
    
    $this->drupalLogin($admin);
    $this->drupalGet('node/add/course');
    
    $this->course_content = array();
    $this->course_content['title'] = $this->randomName(7);
    $this->course_content['body[und][0][value]'] = $this->randomString(50);
    $this->course_content['group_access[und]'] = '0';
    
    // The option for adding a file to the course
//    $course_content['opigno_course_tools[und][tft]'] = '1';
    
    $this->drupalPost('node/add/course', $this->course_content, t('Save'));
    
    // For adding a file in the course
//    $this->drupalGet('my-courses');
//    $label = $course_content['title'];
//    $this->clickLink($label, $index = 0);
    
  }
  
  /**
   * Attending a course for a student (authenticated user).
   */
  protected function attendingCourse() {
    $this->drupalLogout();
    
    $perms = user_role_permissions(array(array_search('authenticated user', user_roles()) => 'authenticated user'));
    $perms = array_keys($perms[array_search('authenticated user', user_roles())]);
    $authenticated_user = $this->drupalCreateUser($perms);
    
    $this->drupalLogin($authenticated_user);
    $this->drupalGet('course-catalogue');
    $this->clickLink('Subscribe to group', $index = 0);
    
    $edit = array();
    
    $this->drupalPost('', $edit, t('Join'));
  }
  
  /**
   * Attending a private course.
   */
  protected function createPrivateCourse() {
    $perms = user_role_permissions(array(array_search('administrator', user_roles()) => 'administrator'));
    $perms = array_keys($perms[array_search('administrator', user_roles())]);
    $admin = $this->drupalCreateUser($perms);
    
    $this->drupalLogin($admin);
    $this->drupalGet('node/add/course');
    
    $this->course_content = array();
    $this->course_content['title'] = $this->randomName(7);
    $this->course_content['body[und][0][value]'] = $this->randomString(50);
    $this->course_content['group_access[und]'] = '2';
    
    $this->drupalPost('node/add/course', $this->course_content, t('Save'));
    
    $this->drupalLogout();
    
    // Connection and inscription to the course as a student manager.
    $perms = user_role_permissions(array(array_search('student manager', user_roles()) => 'student manager'));
    $perms = array_keys($perms[array_search('student manager', user_roles())]);
    $student_manager = $this->drupalCreateUser($perms);
    $this->drupalLogin($student_manager);
    $this->drupalGet('course-catalogue');
    $this->clickLink('Subscribe to group', $index = 0);
    
    $this->drupalLogout();
    
    // Connection and inscription to the course as an authenticated user.
    $perms = user_role_permissions(array(array_search('authenticated user', user_roles()) => 'authenticated user'));
    $perms = array_keys($perms[array_search('authenticated user', user_roles())]);
    $authenticated_user = $this->drupalCreateUser($perms);
    $this->drupalLogin($authenticated_user);
    $this->drupalGet('course-catalogue');
    $this->clickLink('Subscribe to group', $index = 0);
    
    $this->drupalLogout();
    
    // Connection and inscription to the course as an administrator.
    $perms = user_role_permissions(array(array_search('administrator', user_roles()) => 'administrator'));
    $perms = array_keys($perms[array_search('administrator', user_roles())]);
    $administrator = $this->drupalCreateUser($perms);
    $this->drupalLogin($administrator);
    $this->drupalGet('course-catalogue');
    $this->clickLink('Subscribe to group', $index = 0);
    $this->drupalGet('my-courses');
    
    $this->drupalLogout();
  }
  
  /**
   * Create a course for live lesson and create the live lesson by a teacher.
   */
  protected function createLiveCourse() {
    $perms = user_role_permissions(array(array_search('administrator', user_roles()) => 'administrator'));
    $perms = array_keys($perms[array_search('administrator', user_roles())]);
    $admin = $this->drupalCreateUser($perms);
    
    $this->drupalLogin($admin);
    
    // Enabled the module.
    $this->drupalGet('admin/modules');
    $module_enabled = array();
    $module_enabled['modules[Opigno Apps][opigno_live_meetings][enable]'] = '1';
    $this->drupalPost(NULL, $module_enabled, t('Save configuration'));
    $edit_continue = array();
    $this->drupalPost(NULL, $edit_continue, t('Continue'));
    
    $this->drupalGet('node/add/course');
    
    $this->course_content = array();
    $this->course_content['title'] = $this->randomName(7);
    $this->course_content['body[und][0][value]'] = $this->randomString(50);
    $this->course_content['group_access[und]'] = '1';
    $this->course_content['opigno_course_tools[und][live_meetings]'] = '1';
    
    $this->drupalPost('node/add/course', $this->course_content, t('Save'));
    
    $this->drupalLogout();

//    $this->drupalGet('admin/people/permissions');
    
    $perms = user_role_permissions(array(array_search('authenticated user', user_roles()) => 'authenticated user'));
    $perms = array_keys($perms[array_search('authenticated user', user_roles())]);
    $teacher = $this->drupalCreateUser($perms);
    $this->drupalLogin($teacher);
    // Subscribe to the course as a student
//    $this->drupalLogout();
    $this->drupalGet('course-catalogue');
    $this->clickLink('Subscribe to group', $index = 0);
    $edit = array();
    $this->drupalPost(NULL, $edit, t('Join'));
    
    // Change the role of the student for this course
//    $this->drupalLogin($admin);
//    $this->drupalGet('node/3/group');
//    $this->clickLink('edit', $index = 1);
//
//    $role_course = array();
//    $role_course['roles[65]'] = '65';
//    $this->drupalPost(NULL, $role_course, t('Update membership'));
//
//    // Create a live lesson
//    $this->drupalLogout();
//    $this->drupalLogin($authenticated_user);
//    $this->drupalGet('node/3/live-meetings');
//    $this->clickLink('Create meeting', $index = 0);
//
//    $edit = array();
//    $this->drupalPost(NULL, $edit, t('Save'));
    
  }
  
  /**
   * Adding a file to a course.
   */
  protected function addingFile() {
    $this->drupalGet('node/3/tft');
    $this->clickLink('Add a file', $index = 0);
    
    $path = './sites/default/files/test.txt';
    $filetitle = 'test';
    $filename = 'test.txt';
    
    $file_temp = file_get_contents($path);
    $file_temp = file_save_data($file_temp, 'c://' . $filename, FILE_EXISTS_RENAME);
    
    $file_content = array();
    $file_content['title'] = $filetitle;
    $file_content['files[tft_file_und_0]'] = $file_temp;
    
    $this->drupalPost(NULL, $file_content, t('Save'));
    
    $this->drupalGet('node/3/tft');
    
  }
  
  /*
   * Access to a file document only if we join it.
   */
  protected function accessFile() {
    $this->drupalLogout();
    
    $perms = user_role_permissions(array(array_search('administrator', user_roles()) => 'administrator'));
    $perms = array_keys($perms[array_search('administrator', user_roles())]);
    $admin = $this->drupalCreateUser($perms);
    
    $this->drupalLogin($admin);
    $this->drupalGet('node/3/group');
  }
  
  /**
   * Create a lesson in a course.
   */
  protected function createLesson() {
    $this->drupalGet('node/3/quizzes');
    $this->clickLink('Add new lesson', $index = 0);
    
    $this->lesson_content = array();
    $this->lesson_content['title'] = $this->randomName(4);
    $this->drupalPost(NULL, $this->lesson_content, t('Save'));
    
    $this->drupalGet('node/add/truefalse', array(
      'query' => array(
        'quiz_nid' => 4,
        'quiz_vid' => 4,
      )
    ));
    
    $edit = array();
    $this->drupalPost(NULL, $edit, t('Save'));
//    $this->drupalPost(NULL, $edit, t('Submit'));
  }
  
  /**
   * Create obligatory lessons.
   */
  protected function createObligatoryLesson() {
    $this->drupalGet('node/3/quizzes');
    $this->clickLink('Add new lesson', $index = 0);
  
    $lesson_content_one = array();
    $lesson_content_one['title'] = $this->randomName(4);
    $this->drupalPost(NULL, $lesson_content_one, t('Save'));
  
    $this->drupalGet('node/add/truefalse', array(
      'query' => array(
        'quiz_nid' => 4,
        'quiz_vid' => 4,
      )
    ));
  
    $edit = array();
    $this->drupalPost(NULL, $edit, t('Save'));
  
    $this->drupalGet('node/3/quizzes');
    $this->clickLink('Add new lesson', $index = 0);
  
    $lesson_content_two = array();
    $lesson_content_two['title'] = $this->randomName(4);
    $this->drupalPost(NULL, $lesson_content_two, t('Save'));
  
    $this->drupalGet('node/add/truefalse', array(
      'query' => array(
        'quiz_nid' => 6,
        'quiz_vid' => 6,
      )
    ));
  
    $edit = array();
    $this->drupalPost(NULL, $edit, t('Save'));
  
    $this->clickLink($lesson_content_one['title'], $index = 0);
    $this->clickLink('', $index = 15);
    $edit_course = array();
    $edit_course['course_required_quiz_ref[und][0][target_id]'] = $lesson_content_one['title'];
    $edit_course['certificate[map][manual][manual]'] = '1';
    $this->drupalPost(NULL, $edit_course, t('Save'));
    
    // Student fails the obligatory test.
    $this->drupalLogout();
    $perms = user_role_permissions(array(array_search('authenticated user', user_roles()) => 'authenticated user'));
    $perms = array_keys($perms[array_search('authenticated user', user_roles())]);
    $student = $this->drupalCreateUser($perms);
    $this->drupalLogin($student);
    $this->drupalGet('course-catalogue');
    $this->clickLink('Subscribe to group', $index = 0);
    $edit = array();
    $this->drupalPost(NULL, $edit, t('Join'));
    $this->clickLink('Start', $index = 0);
    $result = array();
    $result['tries'] = '0';
    $this->drupalPost(NULL, $result, t('Finish'));
    $this->clickLink('To next lesson', $index = 0);

    $result = array();
    $result['tries'] = '1';
    $this->drupalPost(NULL, $result, t('Finish'));
    $this->clickLink('Back to course', $index = 0);
    $this->clickLink('Certificate', $index = 0);
    
    // Another student passes all the tests
    $this->drupalLogout();
    $perms = user_role_permissions(array(array_search('authenticated user', user_roles()) => 'authenticated user'));
    $perms = array_keys($perms[array_search('authenticated user', user_roles())]);
    $student = $this->drupalCreateUser($perms);
    $this->drupalLogin($student);
    $this->drupalGet('course-catalogue');
    $this->clickLink('Subscribe to group', $index = 0);
    $edit = array();
    $this->drupalPost(NULL, $edit, t('Join'));
    $this->clickLink('Start', $index = 0);
    $result = array();
    $result['tries'] = '1';
    $this->drupalPost(NULL, $result, t('Finish'));
    $this->clickLink('To next lesson', $index = 0);
  
    $result = array();
    $result['tries'] = '1';
    $this->drupalPost(NULL, $result, t('Finish'));
    $this->clickLink('Back to course', $index = 0);
    $this->clickLink('Certificate', $index = 0);
  }
  
  /**
   * Changed a student in a course to a teacher.
   */
  protected function studentToTeacher() {
    // Passed the student as a teacher.
    $this->drupalLogout();
    
    $perms = user_role_permissions(array(array_search('authenticated user', user_roles()) => 'authenticated user'));
    $perms = array_keys($perms[array_search('authenticated user', user_roles())]);
    $authenticated_user = $this->drupalCreateUser($perms);
    $this->drupalLogin($authenticated_user);
    
    $this->drupalGet('course-catalogue');
    $this->clickLink('Subscribe to group', $index = 0);
    $edit = array();
    $this->drupalPost(NULL, $edit, t('Join'));
    $this->drupalLogout();
    
    $perms = user_role_permissions(array(array_search('administrator', user_roles()) => 'administrator'));
    $perms = array_keys($perms[array_search('administrator', user_roles())]);
    $admin = $this->drupalCreateUser($perms);
    $this->drupalLogin($admin);
    
    $this->drupalGet('node/3/group');
    $this->clickLink('edit', $index = 1);
    $role = array();
    $role['roles[23]'] = '23';
    $this->drupalPost(NULL, $role, t('Update membership'));
    $this->drupalLogout();
    
    // Create the lesson.
    $this->drupalLogin($authenticated_user);
    
    $this->drupalGet('node/3/quizzes');
    $this->clickLink('Add new lesson', $index = 0);
    
    $lesson_content = array();
    $lesson_content['title'] = $this->randomName(4);
    $this->drupalPost(NULL, $lesson_content, t('Save'));
    
    $this->drupalGet('node/add/truefalse', array(
      'query' => array(
        'quiz_nid' => 3,
        'quiz_vid' => 3,
      )
    ));
    
    $edit = array();
    $edit['og_group_ref[und][0][default][]'] = '3';
    $this->drupalPost(NULL, $edit, t('Save'));
    
    $this->drupalLogout();
    
    $perms = user_role_permissions(array(array_search('authenticated user', user_roles()) => 'authenticated user'));
    $perms = array_keys($perms[array_search('authenticated user', user_roles())]);
    $student = $this->drupalCreateUser($perms);
    $this->drupalLogin($student);
    
    $this->drupalGet('course-catalogue');
    $this->clickLink('Subscribe to group', $index = 0);
    $edit = array();
    $this->drupalPost(NULL, $edit, t('Join'));
    
    $this->clickLink('Start', $index = 0);
    $result = array();
    $result['tries'] = '1';
    $this->drupalPost(NULL, $result, t('Finish'));
    
    $this->drupalLogout();
    
    $this->drupalLogin($authenticated_user);
    $this->drupalGet('node/3/quizzes');
    $this->clickLink('Results', $index = 0);
  }
  
  protected function studentPassTest() {
    $this->drupalLogout();
    
    $perms = user_role_permissions(array(array_search('authenticated user', user_roles()) => 'authenticated user'));
    $perms = array_keys($perms[array_search('authenticated user', user_roles())]);
    $student = $this->drupalCreateUser($perms);
    $this->drupalLogin($student);
    
    $this->drupalGet('course-catalogue');
    $this->clickLink('Subscribe to group', $index = 0);
    $edit = array();
    $this->drupalPost(NULL, $edit, t('Join'));
    
    $this->clickLink('Start', $index = 0);
    $result = array();
    $result['tries'] = '1';
    $this->drupalPost(NULL, $result, t('Finish'));
    
    $this->assertText('100');
    
  }
  
  /**
   * Teacher verified results on a lesson.
   */
  protected function teacherVerifiedResult() {
    $this->drupalLogout();
    
    $perms = user_role_permissions(array(array_search('authenticated user', user_roles()) => 'authenticated user'));
    $perms = array_keys($perms[array_search('authenticated user', user_roles())]);
    $teacher = $this->drupalCreateUser($perms);
    $this->drupalLogin($teacher);
    
    $this->drupalLogout();
    
    $perms = user_role_permissions(array(array_search('administrator', user_roles()) => 'administrator'));
    $perms = array_keys($perms[array_search('administrator', user_roles())]);
    $admin = $this->drupalCreateUser($perms);
    $this->drupalLogin($admin);
    $this->drupalGet('node/3/group/add');
    $member = array();
    $member['name'] = $teacher->name;
    $member['roles[23]'] = '23';
    $this->drupalPost(NULL, $member, t('Add users'));
    
    $this->drupalLogout();
    
    $this->drupalLogin($teacher);
    $this->drupalGet('my-courses');
    $this->clickLink($this->course_content['title'], $index = 0);
    $this->clickLink($this->lesson_content['title'], $index = 0);
    $this->clickLink('Results', $index = 0);
  }
  
  /**
   * Teacher makes a course paying.
   */
  protected function createPayingCourse() {
    
    $perms = user_role_permissions(array(array_search('administrator', user_roles()) => 'administrator'));
    $perms = array_keys($perms[array_search('administrator', user_roles())]);
    $admin = $this->drupalCreateUser($perms);
    
    $perms = user_role_permissions(array(array_search('authenticated user', user_roles()) => 'authenticated user'));
    $perms = array_keys($perms[array_search('authenticated user', user_roles())]);
    $teacher = $this->drupalCreateUser($perms);
    
    $this->drupalLogin($admin);
    
    // Download the Commerce Apps.
    $this->drupalGet('admin/apps/opigno');
    $this->clickLink('', $index = 22);
    $this->clickLink('Enable App', $index = 0);
    
    $this->drupalLogout();
    
    $perms = user_role_permissions(array(array_search('administrator', user_roles()) => 'administrator'));
    $perms = array_keys($perms[array_search('administrator', user_roles())]);
    $administrator = $this->drupalCreateUser($perms);
    $this->drupalLogin($administrator);
    
    // Add a course with a price.
    $this->drupalGet('node/add/course');
    
    $this->course_content = array();
    $this->course_content['title'] = $this->randomName(7);
    $this->course_content['body[und][0][value]'] = $this->randomString(50);
    $this->course_content['group_access[und]'] = '0';
    $this->course_content['opigno_commerce_price[und][0][amount]'] = '2000';
    $this->drupalPost('node/add/course', $this->course_content, t('Save'));
    
    // Add $teacher as a teacher for the created course.
    $this->drupalGet('node/3/group/add');
    $member = array();
    $member['name'] = $teacher->name;
    $member['roles[23]'] = '23';
    $this->drupalPost(NULL, $member, t('Add users'));
    
    $this->drupalLogout();
    
    $this->drupalLogin($teacher);
    $this->drupalGet('my-courses');
    $this->clickLink($this->course_content['title'], $index = 0);
    $this->clickLink('', $index = 13);
    
    $price = array();
    $price['opigno_commerce_price[und][0][amount]'] = '200';
    $this->drupalPost(NULL, $price, t('Save'));
  }
  
  /**
   * Buy a course for an anonymous user.
   */
  protected function buyCourse() {
    $this->drupalLogout();
    $this->drupalGet('course-catalogue');
    $this->clickLink('Buy access', $index = 0);
    $edit = array();
    $this->drupalPost(NULL, $edit, t('Add to cart'));
  }
  
  /**
   * Create a class with courses.
   */
  protected function createClass() {
    // Create courses.
    $perms = user_role_permissions(array(array_search('administrator', user_roles()) => 'administrator'));
    $perms = array_keys($perms[array_search('administrator', user_roles())]);
    $admin = $this->drupalCreateUser($perms);
    
    $this->drupalLogin($admin);
    // First course with a lesson.
    $this->drupalGet('node/add/course');
    $first_course_content = array();
    $first_course_content['title'] = $this->randomName(7);
    $first_course_content['body[und][0][value]'] = $this->randomString(50);
    $first_course_content['group_access[und]'] = '0';
    $this->drupalPost('node/add/course', $first_course_content, t('Save'));
    
    $this->drupalGet('node/3/quizzes');
    $this->clickLink('Add new lesson', $index = 0);
    
    $this->lesson_content = array();
    $this->lesson_content['title'] = $this->randomName(4);
    $this->drupalPost(NULL, $this->lesson_content, t('Save'));
    
    $this->drupalGet('node/add/truefalse', array(
      'query' => array(
        'quiz_nid' => 4,
        'quiz_vid' => 4,
      )
    ));
    
    $edit = array();
    $this->drupalPost(NULL, $edit, t('Save'));
    
    // Second course.
    $this->drupalGet('node/add/course');
    $second_course_content = array();
    $second_course_content['title'] = $this->randomName(7);
    $second_course_content['body[und][0][value]'] = $this->randomString(50);
    $second_course_content['group_access[und]'] = '0';
    $this->drupalPost('node/add/course', $second_course_content, t('Save'));
    
    // Third course.
    $this->drupalGet('node/add/course');
    $third_course_content = array();
    $third_course_content['title'] = $this->randomName(7);
    $third_course_content['body[und][0][value]'] = $this->randomString(50);
    $third_course_content['group_access[und]'] = '0';
    $this->drupalPost('node/add/course', $third_course_content, t('Save'));
    
    // Create a class.
    $this->drupalGet('admin/opigno/content/class-administration');
    $this->clickLink('Add a new class', $index = 0);
    $first_class_content = array();
    $first_class_content['title'] = $this->randomName(3);
    $first_class_content['opigno_class_courses[und][]'] = array(
      '3', '6', '7',
    );
    $first_class_content['group_access[und]'] = '1';
    $this->drupalPost(NULL, $first_class_content, t('Save'));
    
    // Create a second class with the same courses.
    $this->drupalGet('admin/opigno/content/class-administration');
    $this->clickLink('Add a new class', $index = 0);
    $second_class_content = array();
    $second_class_content['title'] = $this->randomName(3);
    $second_class_content['opigno_class_courses[und][]'] = array(
      '3', '6', '7',
    );
    $second_class_content['group_access[und]'] = '1';
    $this->drupalPost(NULL, $second_class_content, t('Save'));
    
    $this->drupalLogout();
    
    // Create student, attending to a class and passing the test.
    $perms = user_role_permissions(array(array_search('authenticated user', user_roles()) => 'authenticated user'));
    $perms = array_keys($perms[array_search('authenticated user', user_roles())]);
    $jean = $this->drupalCreateUser($perms);
    $this->drupalLogin($jean);
    $this->clickLink($first_class_content['title'], $index = 0);
    $this->clickLink('Subscribe to group');
    $join = array();
    $this->drupalPost(NULL, $join, t('Join'));
    $this->clickLink($first_course_content['title'], $index = 0);
    $this->clickLink('Start', $index = 0);
    $result = array();
    $result['tries'] = '1';
    $this->drupalPost(NULL, $result, t('Finish'));
    
    $this->drupalLogout();
    
    // Create student, attending to a class and passing the test.
    $perms = user_role_permissions(array(array_search('authenticated user', user_roles()) => 'authenticated user'));
    $perms = array_keys($perms[array_search('authenticated user', user_roles())]);
    $pierre = $this->drupalCreateUser($perms);
    $this->drupalLogin($pierre);
    $this->clickLink($first_class_content['title'], $index = 0);
    $this->clickLink('Subscribe to group');
    $join = array();
    $this->drupalPost(NULL, $join, t('Join'));
    $this->clickLink($first_course_content['title'], $index = 0);
    $this->clickLink('Start', $index = 0);
    $result = array();
    $result['tries'] = '0';
    $this->drupalPost(NULL, $result, t('Finish'));
    
    $this->drupalLogout();
    
    // Create student, attending to a class and passing the test.
    $perms = user_role_permissions(array(array_search('authenticated user', user_roles()) => 'authenticated user'));
    $perms = array_keys($perms[array_search('authenticated user', user_roles())]);
    $lea = $this->drupalCreateUser($perms);
    $this->drupalLogin($lea);
    $this->clickLink($second_class_content['title'], $index = 0);
    $this->clickLink('Subscribe to group');
    $join = array();
    $this->drupalPost(NULL, $join, t('Join'));
    $this->clickLink($first_course_content['title'], $index = 0);
    $this->clickLink('Start', $index = 0);
    $result = array();
    $result['tries'] = '1';
    $this->drupalPost(NULL, $result, t('Finish'));
    
    $this->drupalLogout();
    
    // Create student, attending to a class and passing the test.
    $perms = user_role_permissions(array(array_search('authenticated user', user_roles()) => 'authenticated user'));
    $perms = array_keys($perms[array_search('authenticated user', user_roles())]);
    $jane = $this->drupalCreateUser($perms);
    $this->drupalLogin($jane);
    $this->clickLink($second_class_content['title'], $index = 0);
    $this->clickLink('Subscribe to group');
    $join = array();
    $this->drupalPost(NULL, $join, t('Join'));
    $this->clickLink($first_course_content['title'], $index = 0);
    $this->clickLink('Start', $index = 0);
    $result = array();
    $result['tries'] = '0';
    $this->drupalPost(NULL, $result, t('Finish'));
    
    $this->drupalLogout();
    
    // Assign the coaches to their classes.
    $perms = user_role_permissions(array(array_search('authenticated user', user_roles()) => 'authenticated user'));
    $perms = array_keys($perms[array_search('authenticated user', user_roles())]);
    $coach_one = $this->drupalCreateUser($perms);
    $this->drupalLogin($coach_one);
    $this->drupalLogout();
    
    $perms = user_role_permissions(array(array_search('authenticated user', user_roles()) => 'authenticated user'));
    $perms = array_keys($perms[array_search('authenticated user', user_roles())]);
    $coach_two = $this->drupalCreateUser($perms);
    $this->drupalLogin($coach_two);
    $this->drupalLogout();
    // First coach.
    $this->drupalLogin($admin);
    $this->drupalGet('node/8/group/add');
    $edit_one = array();
    $edit_one['name'] = $coach_one->name;
    $edit_one['roles[41]'] = '41';
    $this->drupalPost(NULL, $edit_one, t('Add users'));
    // Second coach.
    $this->drupalGet('node/9/group/add');
    $edit_two = array();
    $edit_two['roles[46]'] = '46';
    $this->drupalPost(NULL, $edit_two, t('Add users'));
    
    $this->drupalLogout();
    
    // First coach tries to see the results of the two classes.
    $this->drupalLogin($coach_one);
    $this->drupalGet('node/8/group');
    $this->clickLink('Results', $index = 0);
    $this->drupalGet('node/9/group');
    $this->clickLink('Results', $index = 0);
    $this->assertText('You are not authorized to access this page.');
    
    $this->drupalLogout();
    
    // First coach tries to see the results of the two classes.
    $this->drupalLogin($coach_two);
    $this->drupalGet('node/9/group');
    $this->clickLink('Results', $index = 0);
    $this->drupalGet('node/8/group');
    $this->clickLink('Results', $index = 0);
    $this->assertText('You are not authorized to access this page.');
  }
  
  
}
