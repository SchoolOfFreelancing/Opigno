<?php

/**
 * @file
 * Contains all hook_implementations and module specific API.
 */

/**
 * @todo
 *  - Add new permission + callback for views pages
 *  - Add views to install (Features ?)
 */
 
/**
 * Implements hook_menu_alter()
 */
function opigno_menu_alter(&$items) {
  
}

/**
 * Implements hook_block_info()
 */
function opigno_block_info() {
  return array(
    'og_tools' => array(
      'info' => t("Opigno: OG tools"),
      'cache' => DRUPAL_CACHE_PER_PAGE
    ),
    'add_og_content' => array(
      'info' => t("Opigno: Add OG content"),
      'cache' => DRUPAL_CACHE_PER_USER
    )
  );
}

/**
 * Implements hook_block_view()
 */
function opigno_block_view($delta) {
  module_load_include('inc', 'opigno', 'includes/opigno.block');
  
  switch ($delta) {
    case 'og_tools':
      return opigno_og_tools_block();
    
    case 'add_og_content':
      return opigno_og_add_content_block();
  }
}

/**
 * Implements hook_theme()
 */
function opigno_theme() {
  return array(
    'opigno__og_tool' => array(
      'variables' => array('og_type' => NULL, 'machine_name' => NULL, 'name' => NULL, 'url' => NULL),
      'template' => 'theme/opigno--og-tool'
    ),
    'opigno__add_content_to_og_list' => array(
      'variables' => array('og_type' => NULL, 'tools' => array()),
      'template' => 'theme/opigno--add-content-to-og-list'
    )
  );
}

/**
 * Implements hook_opigno_course_tools()
 */
function opigno_opigno_course_tools($node) {
  // @todo - activate/deactivate certain tools ?
  
  return array(
    'wikis' => array(
      'tool_name' => t("Wikis"),
      'tool_url' => url("node/{$node->nid}/wikis"),
      'create_label' => t("Add a wiki"),
      'create_url' => url('node/add/wiki', array('query' => array('gids_node[]' => $node->nid)))
    ),
    'quizzes' => array(
      'tool_name' => t("Quizzes"),
      'tool_url' => url("node/{$node->nid}/quizzes"),
      'create_label' => t("Add a quiz"),
      'create_url' => url('node/add/quiz', array('query' => array('gids_node[]' => $node->nid)))
    ),
    'calendar' => array(
      'tool_name' => t("Calendar"),
      'tool_url' => url("node/{$node->nid}/calendar"),
      'create_label' => t("Add a calendar entry"),
      'create_url' => url('node/add/calendar-entry', array('query' => array('gids_node[]' => $node->nid)))
    ),
    'poll' => array(
      'tool_name' => t("Polls"),
      'tool_url' => url("node/{$node->nid}/polls"),
      'create_label' => t("Add a poll"),
      'create_url' => url('node/add/poll', array('query' => array('gids_node[]' => $node->nid)))
    ),
    'workgroups' => array(
      'tool_name' => t("Workgroups"),
      'tool_url' => url("node/{$node->nid}/workgroups"),
      'create_label' => t("Add a workgroup"),
      'create_url' => url('node/add/workgroup', array('query' => array('gids_node[]' => $node->nid)))
    )
  );
}

/**
 * Implements hook_opigno_workgroup_tools()
 */
function opigno_opigno_workgroup_tools($node) {
  // @todo - activate/deactivate certain tools ?
  
  return array(
    'wikis' => array(
      'tool_name' => t("Wikis"),
      'tool_url' => url("node/{$node->nid}/wikis"),
      'create_label' => t("Add a wiki"),
      'create_url' => url('node/add/wiki', array('query' => array('gids_node[]' => $node->nid)))
    ),
    'calendar' => array(
      'tool_name' => t("Calendar"),
      'tool_url' => url("node/{$node->nid}/calendar"),
      'create_label' => t("Add a calendar entry"),
      'create_url' => url('node/add/calendar-entry', array('query' => array('gids_node[]' => $node->nid)))
    ),
    'poll' => array(
      'tool_name' => t("Polls"),
      'tool_url' => url("node/{$node->nid}/polls"),
      'create_label' => t("Add a poll"),
      'create_url' => url('node/add/poll', array('query' => array('gids_node[]' => $node->nid)))
    ),
    'workgroups' => array(
      'tool_name' => t("Workgroups"),
      'tool_url' => url("node/{$node->nid}/workgroups"),
      'create_label' => t("Add a workgroup"),
      'create_url' => url('node/add/workgroup', array('query' => array('gids_node[]' => $node->nid)))
    )
  );
}

/**
 * Custom title callback.
 * Generates a title based on the node title and page type.
 * 
 * @param object $node
 * 
 * @param string $type
 *        The page type. Can be 'wiki', 'quiz', 'workgroup', etc
 * 
 * @return string
 */
function opigno_node_title($node, $type) {
  $node_title = $node->title;
  
  switch($type) {
    case 'wiki':
      $objects = t("wikis");
      break;
      
    case 'files':
      $objects = t("documents");
      break;
      
    case 'quiz':
      $objects = t("assessments");
      break;
      
    default:
      $objects = t("content");
      break;
  }
  
  return t("@title !objects", array('@title' => $title, '!objects' => $objects));
}

/**
 * Custom access callback
 * Use the settings from og_access to determine if a user has access to the current
 * node.
 *
 * @param object $node
 *
 * @param string $type
 *        The page type. Can be 'wiki', 'quiz', 'workgroup', etc
 *
 * @return bool
 */
function opigno_node_access($node, $type) {
  return TRUE;
}


function opigno_course_students_info($node) {
  $node_id=$node->nid;
  $group_members = opigno_get_users_in_group($node_id);
  $students_number=0;
  foreach ($group_members AS $member)
  {
    $user = user_load($member->uid);
    $user_roles=og_get_user_roles('node',$node_id,$user->uid,FALSE);
    foreach ($user_roles as $roleid=> $rolename)
    {
      if (($roleid==5)&&(sizeof($user_roles)==1))
      {
        $students_number++;
      }
    }
  }
    return array('places' => $node->field_course_places[LANGUAGE_NONE][0]['value'],
      'available_places' => $node->field_course_places[LANGUAGE_NONE][0]['value']-$students_number,
      'students' => $students_number);
}

function opigno_get_users_in_group($gid) {
  $query = db_select('users', 'u');
  $query
    ->condition('u.uid', 0, '<>')
    ->condition('u.status', 1, '=')
    ->fields('u', array('uid', 'name'))
    ->join('og_membership', 'ogm', "ogm.gid = :gid AND u.uid = ogm.etid AND ogm.entity_type = 'user'", array(':gid' => $gid));
  return $query->execute();
}

function opigno_form_alter(&$form, &$form_state, $form_id) {

  if (($form['#form_id']=="views_form_og_massadd_block_1"))
  {
    $node=node_load($form_state['build_info']['args'][0]->args[0]);
    if ($node->type=="course")
    {
    $info=opigno_course_students_info($node);
    if ($info['available_places']<=0)
    {
      drupal_set_message(t('This course is full at the moment, ').t('it has at the moment ').($info['available_places']*-1).t(" more student(s) than quota"),'warning');
    }
    }
  }

  if (($form['#form_id']=="og_ui_add_users"))
  {
    $node=node_load($form['membership_fields']['#entity']->gid);
    if ($node->type=="course")
    {
      $info=opigno_course_students_info($node);
      if ($info['available_places']<=0)
      {
        drupal_set_message(t('This course is full at the moment, ').t('it has at the moment ').($info['available_places']*-1).t(" more student(s) than quota"),'warning');
      }
    }
  }

  if (($form['#form_id']=="og_massadd_massadd_form"))
  {
    $node=node_load($form['group_ids']['#value'][0]);
    if ($node->type=="course")
    {
      $info=opigno_course_students_info($node);
      if ($info['available_places']<=0)
      {
        drupal_set_message(t('This course is full at the moment, ').t('it has at the moment ').($info['available_places']*-1).t(" more student(s) than quota"),'warning');
      }
    }
  }

  //'status' 'warning' 'error'
  if (isset($form_state['field']['og_membership_request']))
  {
    $node=node_load($form_state['og_membership']->gid);
    $info=opigno_course_students_info($node);
    if ($info['available_places']<=0)
    {
      unset($form['actions']['submit']);
      unset($form['og_membership_request']);
      drupal_set_title(t('This course is full at the moment'));
    }
  }

  if ($form['form_id']['#id']=="edit-og-massadd-massadd-form")
  {
    //dpm($form);
    $nid=$form['group_ids']['#value'][0];
    //dpm("Tamos no mass add");
    //$form = array();
    $form['description'] = array(
      '#type' => 'item',
    );
    $form['massadd'] = array(
      '#type' => 'multiselect',
      '#title' => t('Select students to add to the course'),
      '#default_value' => null,
      '#multiple' => array("james" => 'james'),
      '#size' => 15,
      '#required' => TRUE,
    );
    $users = entity_load('user');
    foreach ($users as $user_id => $user) {
      if ($user_id!=0)
      {
      $userloaded=user_load($user_id);
      $groups=og_get_groups_by_user($userloaded,NULL);
      $found=false;
      if (is_array($groups))
      {
      foreach($groups as $group)
      {
        if (isset($group[$nid]))
        {
          $found=true;
        }
      }
      }
      if ($found==false)
      {
        $form['massadd']['#options'][$user_id]=$user->name;
      }
      }
    }
    //$form = system_settings_form($form);
    unset($form['#validate']);
    //unset($form['#submit']);
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
      '#submit' => array('coisa'),
    );
  }
  //dpm($form);
}

function coisa(&$form_state)
{
  //dpm("It did the function i wanted");
  //dpm($form_state);
  foreach($form_state['massadd']['#value'] as $user)
  {
    //dpm($user);
    $values=array('entity' => $user);
    og_group('node',$form_state['group_ids']['#value'][0],$values,TRUE);
  }
  return TRUE;
}

