<?php

/**
 * @file
 * Contains all hook_implementations and module specific API.
 */

define('OPIGNO_COURSE_BUNDLE', 'course');

/**
 * Implements hook_menu().
 */
function opigno_menu() {
  return array(
    'node/%node/tools' => array(
      'title' => 'Tools',
      'access callback' => 'opigno_access_tools',
      'access arguments' => array(1),
      'page callback' => 'opigno_tools_page',
      'page arguments' => array(1),
      'type' => MENU_LOCAL_TASK,
      'weight' => 10,
    ),
  );
}

/**
 * Implements hook_init().
 */
function opigno_init() {
  _opigno_install_custom_fields();
}

/**
 * Implements hook_hook_info().
 */
function hook_hook_info() {
  return array(
    'opigno_tool' => array(
      'group' => 'opigno',
    ),
    'opigno_tool_alter' => array(
      'group' => 'opigno',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function opigno_block_info() {
  return array(
    'opigno_tools_block' => array(
      'info' => t("Opigno Course Tools"),
    ),
    'opigno_tool_actions_block' => array(
      'info' => t("Opigno Course Tool Actions"),
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function opigno_block_view($delta) {
  global $user;
  $node = menu_get_object();
  switch ($delta) {
    case 'opigno_tool_actions_block':
      if (!empty($node)) {
        $links = array();
        foreach (opigno_get_node_tools($node, $user) as $tool) {
          if (!empty($tool['actions'])) {
            foreach ($tool['actions'] as $action_id => $action) {
              $defaults = array(
                'access_arguments' => array('access content'),
                'access_callback' => 'user_access',
              );
              $action += $defaults;

              if (opigno_tool_action_access($action, $user)) {
                $links[$action_id] = $action;
              }
            }
          }
        }
      }
      return array(
        'subject' => t("Tool actions"),
        'content' => empty($links) ? '' : theme('links', array('links' => $links)),
      );

    case 'opigno_tools_block':
      if (!empty($node)) {
        $elements = array();
        foreach (opigno_get_node_tools($node, $user) as $tool) {
          $elements[$delta] = array(
            '#type' => 'html_tag',
            '#tag' => 'p',
            '#value' => check_plain($tool['name']),
          );
        }
      }
      return array(
        'subject' => t("Tool actions"),
        'content' => empty($elements) ? '' : $elements,
      );
  }
}

/**
 * Implements hook_apps_servers_info()
 */
function opigno_apps_servers_info() {
  return array(
    'opigno' => array(
      'title' => 'Opigno',
      'description' => t("Apps for Opigno"),
      'manifest' => 'http://www.opigno.org/apps/opigno_apps_manifest.json',
    ),
  );
}

/**
 * Implements hook_theme().
 */
function opigno_theme() {
  return array(
    'opigno_tool' => array(
      'variables' => array('tool' => NULL, 'course' => NULL),
      'template' => 'templates/opigno--tool',
    ),
    'opigno_tools' => array(
      'variables' => array('tools' => NULL, 'course' => NULL),
      'template' => 'templates/opigno--tools',
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function opigno_field_info() {
  return array(
    'opigno_tools' => array(
      'label' => t('Opigno tools'),
      'description' => t("This field stores tools that can be activated/deactivated per course."),
      'settings' => array('allowed_values' => array(), 'allowed_values_function' => ''),
      'default_widget' => 'options_buttons',
      'default_formatter' => 'opigno_tools_name',
    ),
  );
}

/**
 * Implements hook_field_widget_info_alter().
 */
function opigno_field_widget_info_alter(&$info) {
  $info['options_buttons']['field types'] = array_merge($info['options_buttons']['field types'], array('opigno_tools'));
}

/**
 * Implements hook_options_list().
 */
function opigno_options_list($field, $instance, $entity_type, $entity) {
  $options = array();
  foreach (opigno_get_tools() as $tool) {
    $options[$tool['machine_name']] = $tool['name'];
  }
  return $options;
}

/**
 * Implements hook_field_is_empty().
 */
function opigno_field_is_empty($item, $field) {
  return empty($item['tool']);
}

/**
 * Implements hook_field_formatter_info().
 */
function opigno_field_formatter_info() {
  return array(
    'opigno_tools_name' => array(
      'label' => t('Only display tool name'),
      'field types' => array('opigno_tools'),
    ),
    'opigno_tools_tool' => array(
      'label' => t('Display the tool "block" (opigno--tool.tpl.php)'),
      'field types' => array('opigno_tools'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function opigno_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  global $user;
  $element = array();

  switch ($display['type']) {
    case 'opigno_tools_name':
      foreach ($items as $delta => $item) {
        $info = opigno_get_tool($item['tool'], $entity, $user);
        if (!empty($info)) {
          $element[$delta] = array(
            '#type' => 'html_tag',
            '#tag' => 'p',
            '#value' => check_plain($info['name']),
          );
        }
      }
      break;

    case 'opigno_tools_tool':
      foreach ($items as $delta => $item) {
        $info = opigno_get_tool($item['tool'], $entity, $user);
        if (!empty($info)) {
          $element[$delta] = array(
            '#theme' => 'opigno_tool',
            '#tool' => $info,
            '#course' => $entity,
          );
        }
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_preprocess_opigno_tool().
 */
function opigno_preprocess_opigno_tool(&$vars) {
  $vars['name'] = check_plain($vars['tool']['name']);
  $vars['machine_name'] = check_plain($vars['tool']['machine_name']);
  $vars['description'] = check_plain($vars['tool']['description']);
  $vars['path'] = check_plain($vars['tool']['path']);
}

/**
 * Tokenize the path.
 * @todo use tokens ??
 *
 * @param  string $path
 * @param  stdClass $node
 *
 * @return string
 */
function opigno_tokenize_path($path, $node) {
  return str_replace(':nid', $node->nid, str_replace(':vid', $node->vid, $path));
}

/**
 * Fetches the list of tools for the platform.
 *
 * @param  stdClass $node = NULL
 *
 * @return array
 */

function opigno_get_tools($node = NULL) {
  $tools = &drupal_static(__FUNCTION__);
  $group = isset($node->nid) ? $node->nid : 'global';

  if (empty($tools[$group])) {
    $tools[$group] = module_invoke_all('opigno_tool', $node);
    foreach ($tools[$group] as $key => &$tool) {
      $tool['machine_name'] = $key;
    }
    drupal_alter('opigno_tool', $tools[$group], $node);
  }
  
  return $tools[$group];
}

/**
 * Fetch information for a specific tool.
 * Optionally, can be filtered by access rights.
 *
 * @param  string $name
 * @param  stdClass $node = NULL
 * @param  stdClass $account = NULL
 *
 * @return array|false
 */
function opigno_get_tool($name, $node = NULL, $account = NULL) {
  // Add defaults to prevent Notices.
  $defaults = array(
    'machine_name' => $name,
    'description' => '',
    'path' => '',
    'actions' => array(),
    'access_arguments' => array('access content'),
    'access_callback' => 'user_access',
  );

  $tools = opigno_get_tools($node);

  if (isset($tools[$name])) {
    $tool = $tools[$name] + $defaults;

    // If an account was given, check user access.
    if (isset($account)) {
      if (!opigno_tool_access($tool, $account)) {
        return FALSE;
      }
    }
    return $tool;
  }
  return FALSE;
}

/**
 * Check user access for the tool.
 *
 * @param  array $tool
 * @param  stdClass $account
 *
 * @return bool
 */
function opigno_tool_access($tool, $account) {
  return call_user_func_array($tool['access_callback'], array_merge($tool['access_arguments'], array($account)));
}

/**
 * Check user access for the tool action.
 *
 * @param  array $action
 * @param  stdClass $account
 *
 * @return bool
 */
function opigno_tool_action_access($action, $account) {
  return call_user_func_array($action['access_callback'], array_merge($action['access_arguments'], array($account)));
}

/**
 * Custom access callback for the tools tab on course nodes.
 *
 * @param  stdClass $node
 *
 * @return bool
 */
function opigno_access_tools($node) {
  if ($node->type === OPIGNO_COURSE_BUNDLE) {
    $tools = opigno_get_tools($node);
    return !empty($tools);
  }
  return FALSE;
}


/**
 * Get tools for the node.
 * Optionally filter by access permissions.
 *
 * @param  stdClass $node
 * @param  stdClass $account = NULL
 *
 * @return array
 */
function opigno_get_node_tools($node, $account = NULL) {
  $tools = array();
  foreach ($node->opigno_course_tools[LANGUAGE_NONE] as $item) {
    $tool = opigno_get_tool($item['tool'], $node, $account);
    if (!empty($tool)) {
      $tools[$item['tool']] = $tool;
    }
  }
  return $tools;
}

/**
 * Page callback for the tools page.
 */
function opigno_tools_page($node) {
  global $user;
  foreach (opigno_get_node_tools($node, $user) as $tool) {
    $tools[] = theme('opigno_tool', array('tool' => $tool, 'course' => $node));
  }
  return theme('opigno_tools', array('tools' => $tools, 'course' => $node));
}

/**
 * Returns an array of all course node NIDs for the platform.
 *
 * @param bool $only_published
 *
 * @return array
 */
function opigno_get_courses($only_published = FALSE) {
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.type', OPIGNO_COURSE_BUNDLE);

  if ($only_published) {
    $query->condition('n.statue', NODE_PUBLISHED);
  }

  $nids = array();
  $result = $query->execute();
  while ($nid = $result->fetchField()) {
    $nids[] = $nid;
  }

  return $nids;
}

/**
 * This is a hack to circumvent the fact that we cannot easily install custom field types
 * within the install hook. This is because the hook_field_info() is not called at that point,
 * triggering a FieldException: Attempt to create a field of unknown type.
 * This function installs the custom fields and sets a variable, making sure we only install it
 * once. It is called in opigno_init().
 */
function _opigno_install_custom_fields() {
  if (!variable_get('opigno_installed_fields', FALSE)) {
    // Add the activate tools field.
    $field = field_info_field('opigno_course_tools');
    if (empty($field)) {
      field_create_field(array(
        'active' => 1,
        'cardinality' => -1,
        'deleted' => 0,
        'entity_types' => array(),
        'field_name' => 'opigno_course_tools',
        'foreign keys' => array(),
        'indexes' => array(
          'tool' => array(
            0 => 'tool',
          ),
        ),
        'locked' => 0,
        'module' => 'opigno',
        'settings' => array(
          'allowed_values' => array(),
          'allowed_values_function' => '',
        ),
        'translatable' => 0,
        'type' => 'opigno_tools',
      ));
    }

    $instance = field_info_instance('node', 'opigno_course_tools', OPIGNO_COURSE_BUNDLE);
    if (empty($instance)) {
      field_create_instance(array(
        'field_name' => 'opigno_course_tools',
        'entity_type' => 'node',
        'bundle' => OPIGNO_COURSE_BUNDLE,
        'label' => "Course tools",
        'description' => "Activate tools for this course. Deactivated tools will be hidden from users.",
        'required' => FALSE,
      ));
    }
    variable_set('opigno_installed_fields', TRUE);
  }
}

function opigno_course_students_info($node) {
  $node_id = $node->nid;
  $group_members = opigno_get_users_in_group($node_id);
  $students_number = 0;
  foreach ($group_members AS $member) {
    $user = user_load($member->uid);
    $user_roles = og_get_user_roles('node', $node_id, $user->uid, FALSE);
    foreach ($user_roles as $roleid => $rolename) {
      if (($roleid == 5) && (sizeof($user_roles) == 1)) {
        $students_number++;
      }
    }
  }
  return array(
    'places' => $node->field_course_places[LANGUAGE_NONE][0]['value'],
    'available_places' => $node->field_course_places[LANGUAGE_NONE][0]['value'] - $students_number,
    'students' => $students_number
  );
}

function opigno_get_users_in_group($gid) {
  $query = db_select('users', 'u');
  $query
    ->condition('u.uid', 0, '<>')
    ->condition('u.status', 1, '=')
    ->fields('u', array('uid', 'name'))
    ->join('og_membership', 'ogm', "ogm.gid = :gid AND u.uid = ogm.etid AND ogm.entity_type = 'user'", array(':gid' => $gid));
  return $query->execute();
}

function opigno_form_alter(&$form, &$form_state, $form_id) {

  /*if (($form['#form_id']=="views_form_og_massadd_block_1"))
  {
    $node=node_load($form_state['build_info']['args'][0]->args[0]);
    if ($node->type=="course")
    {
    $info=opigno_course_students_info($node);
    if ($info['available_places']<=0)
    {
      drupal_set_message(t('This course is full at the moment, ').t('it has at the moment ').($info['available_places']*-1).t(" more student(s) than quota"),'warning');
    }
    }
  }

  if (($form['#form_id']=="og_ui_add_users"))
  {
    $node=node_load($form['membership_fields']['#entity']->gid);
    if ($node->type=="course")
    {
      $info=opigno_course_students_info($node);
      if ($info['available_places']<=0)
      {
        drupal_set_message(t('This course is full at the moment, ').t('it has at the moment ').($info['available_places']*-1).t(" more student(s) than quota"),'warning');
      }
    }
  }

  if (($form['#form_id']=="og_massadd_massadd_form"))
  {
    $node=node_load($form['group_ids']['#value'][0]);
    if ($node->type=="course")
    {
      $info=opigno_course_students_info($node);
      if ($info['available_places']<=0)
      {
        drupal_set_message(t('This course is full at the moment, ').t('it has at the moment ').($info['available_places']*-1).t(" more student(s) than quota"),'warning');
      }
    }
  }

  //'status' 'warning' 'error'
  if (isset($form_state['field']['og_membership_request']))
  {
    $node=node_load($form_state['og_membership']->gid);
    $info=opigno_course_students_info($node);
    if ($info['available_places']<=0)
    {
      unset($form['actions']['submit']);
      unset($form['og_membership_request']);
      drupal_set_title(t('This course is full at the moment'));
    }
  }*/

  /*if (($form['#node_edit_form']==true)&&($form['nid']['#value']==null)&&($form['type']['#value']=='notifications'))
  {
    //$form['field_message']
    $node=$nid = arg(0);
    dpm($node);

    dpm($form_state);

    $default = !empty($form_state['values']['og_group_ref']) ? $form_state['values']['og_group_ref'] : 1;



    $form['og_group_ref']['und']['0']['default']['#ajax'] = array(
    'callback' => 'notifications_get_users_callback',
    'wrapper' => 'checkboxes-div',
    'method' => 'replace',
    'effect' => 'fade',
    );


    $form['field_recipients']['#prefix']='<div id="checkboxes-div">';
    $form['field_recipients']['#suffix']= '</div>';
    //$form['field_recipients']['#type']="hidden";
    dpm($form['field_recipients']);
  }*/


  /*if (($form['form_id']['#value'] == 'privatemsg_new') && (($form['#action'] == '/opignov2/messages/new'))) {
    global $user;
    $groups = og_get_groups_by_user($user, NULL);

    $form['groups'] = array(
      '#type' => 'select',
      '#title' => t('Courses and Classes'),
      '#options' => array(
        'All' => t('All'),
      ),
      '#default_value' => 'All',
      '#description' => t('Choose class or course to filter'),
      '#weight' => -7,
      'callback' => 'messaging_user_update_callback',
      'wrapper' => 'recipient1-div',
      'method' => 'replace',
      'effect' => 'fade',
    );

    foreach ($groups['node'] as $groupid => $group_id) {
      $node = node_load($group_id);
      $form['groups']['#options'][$groupid] = $node->title;
    }


    unset($form['recipient']['#required']);
    $form['recipient']['#type'] = 'hidden';
    $form['recipient1'] = array(
      '#type' => 'multiselect',
      '#title' => t('Select receipients'),
      '#default_value' => NULL,
      '#size' => 10,
      '#required' => TRUE,
      '#weight' => -6,
      '#prefix' => '<div id="recipient1-div">',
      '#suffix' => '</div>',
    );


    global $user;
    foreach ($user->roles as $role) {
      if ($role == "administrateur") {
        $users = entity_load('user');
        foreach ($users as $user_) {
          if (($user_->uid != 0) && ($user_->uid != $user->uid)) {
            $form['recipient1']['#options'][$user_->uid] = $user_->name;
          }
        }
      }
      else {
        $groups = og_get_groups_by_user($user, NULL);
        if (is_array($groups)) {
          foreach ($groups['node'] as $groupid => $group_id) {
            $users = entity_load('user');
            foreach ($users as $user_) {
              if (($user_->uid != 0) && ($user_->uid != $user->uid)) {
                if (og_is_member('node', $groupid, 'user', $user_)) {
                  $nd = node_load($groupid);
                  if ($form['recipient1']['#options'][$user_->uid]) {
                    $form['recipient1']['#options'][$user_->uid] .= " (" . $nd->title . ")";
                  }
                  else {
                    $form['recipient1']['#options'][$user_->uid] = $user_->name . " (" . $nd->title . ")";
                  }
                }
              }
            }
          }
        }
      }
    }
    $form['#validate'] = array('_notifications_privatemsg_validate', 'privatemsg_new_validate');
    $form['body']['#required'] = TRUE;
    $form['subject']['#required'] = TRUE;
  }*/


  if ($form['form_id']['#id'] == "edit-og-massadd-massadd-form") {
    //dpm($form);
    $nid = $form['group_ids']['#value'][0];
    //dpm("Tamos no mass add");
    //$form = array();
    $form['description'] = array(
      '#type' => 'item',
    );
    $form['massadd'] = array(
      '#type' => 'multiselect',
      '#title' => t('Select students to add to the course'),
      '#default_value' => NULL,
      '#multiple' => array("james" => 'james'),
      '#size' => 15,
      '#required' => TRUE,
    );
    $users = entity_load('user');
    foreach ($users as $user_id => $user) {
      if ($user_id != 0) {
        $userloaded = user_load($user_id);
        $groups = og_get_groups_by_user($userloaded, NULL);
        $found = FALSE;
        if (is_array($groups)) {
          foreach ($groups as $group) {
            if (isset($group[$nid])) {
              $found = TRUE;
            }
          }
        }
        if ($found == FALSE) {
          $form['massadd']['#options'][$user_id] = $user->name;
        }
      }
    }
    //$form = system_settings_form($form);
    unset($form['#validate']);
    //unset($form['#submit']);
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
      '#submit' => array('coisa'),
    );
  }
  //dpm($form);
}

/*function _notifications_privatemsg_validate($form, &$form_state) {
  foreach ($form_state['input']['recipient1'] as $index => $user_id) {
    $send_to = user_load($user_id);
    $form_state['input']['recipient'] .= $send_to->name . ",";
    $form_state['values']['recipient'] .= $send_to->name . ",";
  }
  return TRUE;
}*/


function coisa(&$form_state) {
  //dpm("It did the function i wanted");
  //dpm($form_state);
  foreach ($form_state['massadd']['#value'] as $user) {
    //dpm($user);
    $values = array('entity' => $user);
    og_group('node', $form_state['group_ids']['#value'][0], $values, TRUE);
  }
  return TRUE;
}

function opigno_og_role_grant($type, $node_id, $user_id, $role_id) {
  dpm($type);
  dpm($node_id);
  dpm($user_id);
  dpm($role_id);
  if (($type == "node") && (module_exists('rules'))) {
    rules_invoke_event('og_user_was_granted_role', $type, $node_id, $user_id, $role_id);
  }
}

function opigno_og_role_revoke($type, $node_id, $user_id, $role_id) {
  dpm($type);
  dpm($node_id);
  dpm($user_id);
  dpm($role_id);
  if (($type == "node") && (module_exists('rules')) && ($role_id != 7) && ($role_id != 8)) {
    rules_invoke_event('og_user_was_revoked_role', $type, $node_id, $user_id, $role_id);
  }
}
