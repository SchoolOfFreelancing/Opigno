<?php

/**
 * @file
 * Contains all hook_implementations and module specific API.
 */

define('OPIGNO_COURSE_BUNDLE', 'course');

/**
 * Implements hook_menu().
 */
function opigno_menu() {
  return array(
    'node/%node/tools' => array(
      'title' => 'Tools',
      'access callback' => 'opigno_access_tools',
      'access arguments' => array(1),
      'page callback' => 'opigno_tools_page',
      'page arguments' => array(1),
      'type' => MENU_LOCAL_TASK,
    ),
  );
}

/**
 * Implements hook_apps_servers_info()
 */
function opigno_apps_servers_info() {
  return array(
    'opigno' => array(
      'title' => 'Opigno',
      'description' => t("Apps for Opigno"),
      'manifest' => 'http://www.opigno.org/apps/opigno_apps_manifest.json',
    ),
  );
}

/**
 * Implements hook_theme().
 */
function opigno_theme() {
  return array(
    'opigno_tool' => array(
      'variables' => array('tool' => NULL, 'course' => NULL),
      'template' => 'templates/opigno--tool',
    ),
    'opigno_tools' => array(
      'variables' => array('tools' => NULL, 'course' => NULL),
      'template' => 'templates/opigno--tools',
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function opigno_field_info() {
  return array(
    'opigno_tools' => array(
      'label' => t('Opigno tools'),
      'description' => t("This field stores tools that can be activated/deactivated per course."),
      'settings' => array('allowed_values' => array(), 'allowed_values_function' => ''),
      'default_widget' => 'options_buttons',
      'default_formatter' => 'opigno_tools_name',
    ),
  );
}

/**
 * Implements hook_field_widget_info_alter().
 */
function opigno_field_widget_info_alter(&$info) {
  $info['options_buttons']['field types'] = array_merge($info['options_buttons']['field types'], array('opigno_tools'));
}

/**
 * Implements hook_options_list().
 */
function opigno_options_list($field, $instance, $entity_type, $entity) {
  $options = array();
  foreach (opigno_get_tools() as $tool) {
    $options[$tool['machine_name']] = $tool['name'];
  }
  return $options;
}

/**
 * Implements hook_field_is_empty().
 */
function opigno_field_is_empty($item, $field) {
  return empty($item['tool']);
}

/**
 * Implements hook_field_formatter_info().
 */
function opigno_field_formatter_info() {
  return array(
    'opigno_tools_name' => array(
      'label' => t('Only display tool name'),
      'field types' => array('opigno_tools'),
    ),
    'opigno_tools_tool' => array(
      'label' => t('Display the tool "block" (opigno--tool.tpl.php)'),
      'field types' => array('opigno_tools'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function opigno_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'opigno_tools_name':
      foreach ($items as $delta => $item) {
        $info = opigno_get_tool($item['tool']);
        $element[$delta] = array(
          '#type' => 'html_tag',
          '#tag' => 'p',
          '#value' => check_plain($info['name']),
        );
      }
      break;

    case 'opigno_tools_tool':
      foreach ($items as $delta => $item) {
        $info = opigno_get_tool($item['tool']);
        $element[$delta] = array(
          '#theme' => 'opigno_tool',
          '#tool' => $info,
          '#course' => $entity,
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_preprocess_opigno_tool().
 */
function opigno_preprocess_opigno_tool(&$vars) {
  $vars['name'] = check_plain($vars['tool']['name']);
  $vars['machine_name'] = check_plain($vars['tool']['machine_name']);
  $vars['description'] = check_plain($vars['tool']['description']);
  $vars['path'] = check_plain($vars['tool']['path']);
  // @todo use tokens ?
  if (isset($vars['course']->nid)) {
    $vars['path'] = str_replace(':nid', $vars['course']->nid, $vars['path']);
    $vars['path'] = str_replace(':vid', $vars['course']->vid, $vars['path']);
  }
}

/**
 * Fetches the list of tools for the platform.
 *
 * @return array
 */
function opigno_get_tools() {
  $tools = &drupal_static(__FUNCTION__);
  if (empty($tools)) {
    $tools = module_invoke_all('opigno_tool');
    foreach ($tools as $key => &$tool) {
      $tool['machine_name'] = $key;
    }
  }
  return $tools;
}

/**
 * Fetch information for a specific tool.
 *
 * @param  string $name
 *
 * @return array|false
 */
function opigno_get_tool($name) {
  // Add defaults to prevent Notices.
  $defaults = array(
    'machine_name' => $name,
    'description' => '',
    'path' => '',
  );

  $tools = opigno_get_tools();

  if (isset($tools[$name])) {
    $tool = $tools[$name] + $defaults;
    return $tool;
  }
  return FALSE;
}

/**
 * Custom access callback for the tools tab on course nodes.
 *
 * @param  stdClass $node
 *
 * @return bool
 */
function opigno_access_tools($node) {
  if ($node->type === OPIGNO_COURSE_BUNDLE) {
    $tools = opigno_get_tools($node);
    return !empty($tools);
  }
  return FALSE;
}

/**
 * Page callback for the tools page.
 */
function opigno_tools_page($node) {
  $tools = array();
  foreach ($node->field_tools[LANGUAGE_NONE] as $item) {
    $tools[] = theme('opigno_tool', array('tool' => opigno_get_tool($item['tool']), 'course' => $node));
  }
  return theme('opigno_tools', array('tools' => $tools, 'course' => $node));
}

/**
 * Returns an array of all course node NIDs for the platform.
 *
 * @param bool $only_published
 *
 * @return array
 */
function opigno_get_courses($only_published = FALSE) {
  $query = db_select('node', 'n')
              ->fields('n', array('nid'))
              ->condition('n.type', OPIGNO_COURSE_BUNDLE);

  if ($only_published) {
    $query->condition('n.statue', NODE_PUBLISHED);
  }

  $nids = array();
  $result = $query->execute();
  while ($nid = $result->fetchField()) {
    $nids[] = $nid;
  }

  return $nids;
}