<?php

/**
 * @file
 * Contains all hook_implementations and module specific API.
 */

/**
 * @todo
 *  - Add new permission + callback for views pages
 */

/**
 * Implements hook_menu()
 */
function opigno_menu() {
  return array(
    'admin/config/opigno' => array(
      'title' => "Opigno",
      'description' => "Administer the suite of Opigno modules.",
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('administer opigno'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
    )
  );
}

/**
 * Implements hook_permission()
 */
function opigno_permission() {
  return array(
    'administer opigno' => array(
      'title' => t("Administer the Opigno LMS")
    )
  );
}

/**
 * Implements hook_block_info()
 */
function opigno_block_info() {
  return array(
    'og_tools' => array(
      'info' => t("Opigno: OG tools"),
      'cache' => DRUPAL_CACHE_PER_PAGE
    ),
    'add_og_content' => array(
      'info' => t("Opigno: Add OG content"),
      'cache' => DRUPAL_CACHE_PER_USER
    )
  );
}

/**
 * Implements hook_block_view()
 */
function opigno_block_view($delta) {
  module_load_include('inc', 'opigno', 'includes/opigno.block');
  
  switch ($delta) {
    case 'og_tools':
      return opigno_og_tools_block();
    
    case 'add_og_content':
      return opigno_og_add_content_block();
  }
}

/**
 * Implements hook_theme()
 */
function opigno_theme() {
  return array(
    'opigno__og_tool' => array(
      'variables' => array('og_type' => NULL, 'machine_name' => NULL, 'name' => NULL, 'url' => NULL),
      'template' => 'theme/opigno--og-tool'
    ),
    'opigno__add_content_to_og_list' => array(
      'variables' => array('og_type' => NULL, 'tools' => array()),
      'template' => 'theme/opigno--add-content-to-og-list'
    )
  );
}

/**
 * Implements hook_node_insert()
 */
function opigno_node_insert($node) {
  if (opigno_is_og_type($node->type)) {
    opigno_node_update($node);
  }
}

/**
 * Implements hook_node_update()
 */
function opigno_node_update($node) {
  if (opigno_is_og_type($node->type)) {
    variable_set('opigno_og_tools_nid_' . $node->nid, $node->tools_activate);
  }
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function opigno_form_course_node_form_alter(&$form, $form_state) {
  _opigno_form_og_node_form_alter($form, $form_state, 'course');
}

/**
 * Helper function for altering OG forms
 *
 * @param array &$form
 *
 * @param array $form_state
 *
 * @param string $type
 */
function _opigno_form_og_node_form_alter(&$form, $form_state, $type) {  
  if (!isset($form['#node']->nid)) {
    $node = (object) array(
      'nid' => 0
    );
  }
  else {
    $node = $form['#node'];
  }
  
  $form['tools'] = array(
    '#type' => 'fieldset',
    '#title' => $type == 'course' ? t("Course tools") : t("Workgroup tools"),
  );
  
  $tools = array();
  
  foreach(module_invoke_all("opigno_{$type}_tools", $node) as $tool => $tool_info) {
    $tools[$tool] = $tool_info['tool_name'];
  }
  
  $form['tools']['tools_activate'] = array(
    '#type' => 'checkboxes',
    '#title' => t("Choose which tools to activate"),
    '#options' => $tools,
    '#default_value' => variable_get('opigno_og_tools_nid_' . $node->nid, array()),
  );
  
  if (!isset($form['#submit'])) {
    $form['#submit'] = array();
  }
  
  $form['#submit'][] = '_opigno_form_og_node_form_alter_submit';
}

/**
 * Helper submit callback for altering OG forms
 */
function _opigno_form_og_node_form_alter_submit($form, $form_state) {
  $form['#node']->opigno_og_tools = $form_state['values']['tools_activate'];
}

/**
 * Implements hook_opigno_course_tools()
 */
function opigno_opigno_course_tools($node) {
  $tools = array(
    'wikis' => array(
      'tool_name' => t("Wikis"),
      'tool_url' => url("course/{$node->nid}/wiki-page")
    ),
    'quizzes' => array(
      'tool_name' => t("Quizzes"),
      'tool_url' => url("course/{$node->nid}/quiz")
    ),
    'calendar' => array(
      'tool_name' => t("Calendar"),
      'tool_url' => url("course/{$node->nid}/calendar-item")
    ),
    'poll' => array(
      'tool_name' => t("Polls"),
      'tool_url' => url("course/{$node->nid}/poll")
    ),
    'workgroups' => array(
      'tool_name' => t("Workgroups"),
      'tool_url' => url("course/{$node->nid}/workgroup"),
    )
  );
  
  foreach (array('wikis' => 'wiki', 'quizzes' => 'quiz', 'calendar' => 'calendar_entry', 'poll' => 'poll', 'workgroups' => 'workgroup') as $tool => $type) {
    if (user_access("create $type content")) {
      $tools[$tool]['create_label'] = t("Add a !type", array('!type' => str_replace('_', ' ', $type)));
      
      $tools[$tool]['create_url'] = url('node/add/' . str_replace('_', '-', $type), array('query' => array('gids_node[]' => $node->nid)));
    }
  }
  
  return $tools;
}

/**
 * Implements hook_opigno_workgroup_tools()
 */
function opigno_opigno_workgroup_tools($node) {
  // @todo !!
  return array(
    'wikis' => array(
      'tool_name' => t("Wikis"),
      'tool_url' => url("node/{$node->nid}/wikis"),
      'create_label' => t("Add a wiki"),
      'create_url' => url('node/add/wiki', array('query' => array('gids_node[]' => $node->nid)))
    ),
    'calendar' => array(
      'tool_name' => t("Calendar"),
      'tool_url' => url("node/{$node->nid}/calendar"),
      'create_label' => t("Add a calendar entry"),
      'create_url' => url('node/add/calendar-entry', array('query' => array('gids_node[]' => $node->nid)))
    ),
    'poll' => array(
      'tool_name' => t("Polls"),
      'tool_url' => url("node/{$node->nid}/polls"),
      'create_label' => t("Add a poll"),
      'create_url' => url('node/add/poll', array('query' => array('gids_node[]' => $node->nid)))
    ),
    'workgroups' => array(
      'tool_name' => t("Workgroups"),
      'tool_url' => url("node/{$node->nid}/workgroups"),
      'create_label' => t("Add a workgroup"),
      'create_url' => url('node/add/workgroup', array('query' => array('gids_node[]' => $node->nid)))
    )
  );
}

/**
 * Custom access callback
 * Use the settings from og_access to determine if a user has access to the current
 * node.
 *
 * @param object $node
 *
 * @param string $type
 *        The page type. Can be 'wiki', 'quiz', 'workgroup', etc
 *
 * @return bool
 */
function opigno_node_access($node, $type) {
  return TRUE;
}

/**
 * Returns the list tools for the OG node.
 *
 * @param object $node
 *
 * @param bool $only_active = TRUE
 *
 * @return array
 */
function opigno_get_og_tools($node, $only_active = TRUE) {
  $tools = module_invoke_all("opigno_{$node->type}_tools", $node);
  
  if ($only_active) {
    $all_tools = $tools;
    
    $tools = array();
    
    foreach (variable_get('opigno_og_tools_nid_' . $node->nid, array()) as $tool => $active) {
      if ($active) {
        $tools[$tool] = $all_tools[$tool];
      }
    }
  }
  
  return $tools;
}

/**
 * Determines if the node type is an OG type.
 *
 * @param string $type
 *
 * @return bool
 */
function opigno_is_og_type($type) {
  return in_array($type, array('course', 'workgroup'));
}